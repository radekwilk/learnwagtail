HOW TO START WAGTAIL PROJECT

1. Ensure we have Python installed. To do so we can run command

     python -V

2. Next, we have to create virtual environment. One of the methods of use of pipenv. We can run this commands:

    pipenv install
    pipenv shell

3. Now we can install Wagtail, run this command:

    pip install wagtail

4. Once completed, we can check if Wagtail is installed, by running this command:

    pip show wagtail

5. We can also check all the packages installed in my virtual environment by running this command:

    pip freeze

6. Now we can start new wagtail project. Let's name it rocketman. We can run this command:

    wagtail start rocketman    (if we already have rocketman folder, we can runs this command: wagtail start rocketman .  This do at the end will ensure project is created in existing rocketman folder)

7. And them we can install all requirements by running this command:

     pip install -r requirements.txt

8. And now we can run server by running this command:

    py manage.py runserver 0.0.0.0:8000

9. Now we should see that many files are needs to be migrated. Run this command:

    py manage.py migrate

10. If we want to get out of pipenv we need to click Ctrl + D

11. Now we will need to create super user to be able to access admin panel

    py manage.py createsuperuser

    Username:
    Email:
    Password:
    Password (again):

12. Once we make any changes to our models.py file, we need to makemigrations:

    py manage.py makemigrations

    and then migrate

    py manage.py migrate



HOW TO CREATE NEW APP WITHIN EXISTING PROJECT

1. Type this command to start new app (new page). Lets call it services:

    py manage.py startapp services

2. Then do not forget to add services app into our base.py file.

3. Then we can create new classes/pages in services models.py file

4. Once Pages are created, we need to make migrations and migrate:

    py manage.py makemigrations

    and then migrate

    py manage.py migrate

5. Once pages are created and migrations are completed, we can add new created pages as childs to our home page. 
   We can do that in out admin panel, by clicking ADD CHILD PAGE on our HOME PAGE.

6. When all is set up and ready, we will have to create service_page.html template. In our project, the best place it will be in 
   rocketman/templates folder. In there we create services subfolder and then service_page.html


INSTALLING DEBUGGING TOOLS:

1. django debug toolbar
   - in our terminal, type:
      pip install django-debug-toolbar

    - then open file requirements.txt and save it as dev.txt
    - delete it content, and type(version is our installed version of debug tool):
      
        -r requirements.txt
        django-debug-toolbar==3.2.1
    
    - and then, we need to add this to the dev.py file:

       INSTALLED_APPS += [
            'debug_toolbar',
        ]

        MIDDLEWARE += [
            'debug_toolbar.middleware.DebugToolbarMiddleware',
        ]

        INTERNAL_IPS = [
            '127.0.0.1'
        ]

    - and then, in urls.py file, we have to add this line of code before wagtail urlpatterns:

        urlpatterns = [
             path('__debug__/', include(debug_toolbar.urls))
         ] + urlpatterns    

2. PUDB => Python interactive debugger

     - first, run this command in our teminal:
        
         pip install pudb

    - and then, in dev.txt file add (2021.1 is a version of pudb):

        pudb==2021.1  

    And when we want to use it, we can add this in our code we have trouble with:

        import pudb; pu.db() 


CREATING STREAM FIELDS

1. We can create new app, called streams for example.

2. Activate it in our base.py file by adding it to the INSTALLED_APP list

3. In streams folder, we can change models.py file name to blocks.py 


WAGTAILMENUS - EXTERNAL PACKAGE TO HELP SET UP MENU SYSTEM IN WAGTAIL

1. https://github.com/rkhleics/wagtailmenus
2. https://wagtailmenus.readthedocs.io/en/stable/

To SPICE UP FORMS, WE CAN INSTALL DJANGO-WIDGET-TWEAKS
pip install django-widget-tweaks

